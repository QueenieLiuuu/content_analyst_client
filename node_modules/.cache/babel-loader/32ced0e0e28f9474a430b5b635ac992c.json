{"ast":null,"code":"var _jsxFileName = \"/Users/quingmin/Desktop/content_analyzer/src/component/output.js\";\nimport { Button, Input } from 'antd';\nimport React from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard/lib/Component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  TextArea\n} = Input;\n\nclass OutputBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: '',\n      copied: false\n    };\n\n    this.onChange = ({\n      target: {\n        value\n      }\n    }) => {\n      this.setState({\n        value\n      });\n    };\n  }\n\n  render() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextArea, {\n        autoSize: {\n          minRows: 20\n        },\n        value: value,\n        onChange: this.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n        text: this.state.value,\n        onCopy: () => this.setState({\n          copied: true\n        }),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          children: \"Copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), this.state.copied ? /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'red'\n        },\n        children: \"Copied.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 38\n      }, this) : null]\n    }, void 0, true);\n  }\n\n}\n\nexport default OutputBox;","map":{"version":3,"sources":["/Users/quingmin/Desktop/content_analyzer/src/component/output.js"],"names":["Button","Input","React","CopyToClipboard","TextArea","OutputBox","Component","state","value","copied","onChange","target","setState","render","minRows","color"],"mappings":";AAAA,SAAQA,MAAR,EAAgBC,KAAhB,QAA4B,MAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA8B,uCAA9B;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAeH,KAArB;;AAEA,MAAMI,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAD4B;;AAAA,SAMpCC,QANoC,GAMzB,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEH,QAAAA;AAAF;AAAV,KAAD,KAA2B;AAClC,WAAKI,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACH,KARmC;AAAA;;AAUpCK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEL,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AAEA,wBACI;AAAA,8BACI,QAAC,QAAD;AACI,QAAA,QAAQ,EAAE;AAAEO,UAAAA,OAAO,EAAE;AAAX,SADd;AAEI,QAAA,KAAK,EAAEN,KAFX;AAGI,QAAA,QAAQ,EAAE,KAAKE;AAHnB;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,KAAlC;AACiB,QAAA,MAAM,EAAE,MAAM,KAAKI,QAAL,CAAc;AAACH,UAAAA,MAAM,EAAE;AAAT,SAAd,CAD/B;AAAA,+BAEI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cANJ,EAUK,KAAKF,KAAL,CAAWE,MAAX,gBAAoB;AAAM,QAAA,KAAK,EAAE;AAACM,UAAAA,KAAK,EAAE;AAAR,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAApB,GAAkE,IAVvE;AAAA,oBADJ;AAcH;;AA3BmC;;AA6BxC,eAAeV,SAAf","sourcesContent":["import {Button, Input} from 'antd';\nimport React from \"react\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\n\nconst { TextArea } = Input;\n\nclass OutputBox extends React.Component {\n    state = {\n        value: '',\n        copied: false\n    };\n\n    onChange = ({ target: { value } }) => {\n        this.setState({ value });\n    };\n\n    render() {\n        const { value } = this.state;\n\n        return (\n            <>\n                <TextArea\n                    autoSize={{ minRows: 20}}\n                    value={value}\n                    onChange={this.onChange}\n                />\n                <CopyToClipboard text={this.state.value}\n                                 onCopy={() => this.setState({copied: true})}>\n                    <Button>Copy</Button>\n                </CopyToClipboard>\n                {this.state.copied ? <span style={{color: 'red'}}>Copied.</span> : null}\n            </>\n        );\n    }\n}\nexport default OutputBox;"]},"metadata":{},"sourceType":"module"}