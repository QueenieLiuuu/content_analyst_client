{"ast":null,"code":"var _jsxFileName = \"/Users/quingmin/Desktop/content_analyzer/src/component/AnalyzerForm.js\";\nimport { Form, Input, Button, Select } from 'antd';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst layout = {\n  labelCol: {\n    span: 8\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16\n  }\n};\n\nclass FormBox extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.formRef = /*#__PURE__*/React.createRef();\n\n    this.onGenderChange = value => {\n      switch (value) {\n        case 'male':\n          this.formRef.current.setFieldsValue({\n            note: 'Hi, man!'\n          });\n          return;\n\n        case 'female':\n          this.formRef.current.setFieldsValue({\n            note: 'Hi, lady!'\n          });\n          return;\n\n        case 'other':\n          this.formRef.current.setFieldsValue({\n            note: 'Hi there!'\n          });\n      }\n    };\n\n    this.onFinish = values => {\n      console.log(values);\n    };\n\n    this.onReset = () => {\n      this.formRef.current.resetFields();\n    };\n\n    this.onFill = () => {\n      this.formRef.current.setFieldsValue({\n        note: 'Hello world!',\n        gender: 'male'\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Form, { ...layout,\n      ref: this.formRef,\n      name: \"control-ref\",\n      onFinish: this.onFinish,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"note\",\n        label: \"Note\",\n        rules: [{\n          required: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"gender\",\n        label: \"Gender\",\n        rules: [{\n          required: true\n        }],\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Select a option and change input text above\",\n          onChange: this.onGenderChange,\n          allowClear: true,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"male\",\n            children: \"male\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"female\",\n            children: \"female\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"other\",\n            children: \"other\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        noStyle: true,\n        shouldUpdate: (prevValues, currentValues) => prevValues.gender !== currentValues.gender,\n        children: ({\n          getFieldValue\n        }) => getFieldValue('gender') === 'other' ? /*#__PURE__*/_jsxDEV(Form.Item, {\n          name: \"customizeGender\",\n          label: \"Customize Gender\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailLayout,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"button\",\n          onClick: this.onReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"link\",\n          htmlType: \"button\",\n          onClick: this.onFill,\n          children: \"Fill form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default FormBox;","map":{"version":3,"sources":["/Users/quingmin/Desktop/content_analyzer/src/component/AnalyzerForm.js"],"names":["Form","Input","Button","Select","React","Option","layout","labelCol","span","wrapperCol","tailLayout","offset","FormBox","Component","formRef","createRef","onGenderChange","value","current","setFieldsValue","note","onFinish","values","console","log","onReset","resetFields","onFill","gender","render","required","prevValues","currentValues","getFieldValue"],"mappings":"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","sourcesContent":["import { Form, Input, Button, Select } from 'antd';\nimport React from \"react\";\nconst { Option } = Select;\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nclass FormBox extends React.Component {\n    formRef = React.createRef();\n    onGenderChange = (value) => {\n        switch (value) {\n            case 'male':\n                this.formRef.current.setFieldsValue({\n                    note: 'Hi, man!',\n                });\n                return;\n\n            case 'female':\n                this.formRef.current.setFieldsValue({\n                    note: 'Hi, lady!',\n                });\n                return;\n\n            case 'other':\n                this.formRef.current.setFieldsValue({\n                    note: 'Hi there!',\n                });\n        }\n    };\n    onFinish = (values) => {\n        console.log(values);\n    };\n    onReset = () => {\n        this.formRef.current.resetFields();\n    };\n    onFill = () => {\n        this.formRef.current.setFieldsValue({\n            note: 'Hello world!',\n            gender: 'male',\n        });\n    };\n\n    render() {\n        return (\n            <Form {...layout} ref={this.formRef} name=\"control-ref\" onFinish={this.onFinish}>\n                <Form.Item\n                    name=\"note\"\n                    label=\"Note\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    name=\"gender\"\n                    label=\"Gender\"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select\n                        placeholder=\"Select a option and change input text above\"\n                        onChange={this.onGenderChange}\n                        allowClear\n                    >\n                        <Option value=\"male\">male</Option>\n                        <Option value=\"female\">female</Option>\n                        <Option value=\"other\">other</Option>\n                    </Select>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) => prevValues.gender !== currentValues.gender}\n                >\n                    {({ getFieldValue }) =>\n                        getFieldValue('gender') === 'other' ? (\n                            <Form.Item\n                                name=\"customizeGender\"\n                                label=\"Customize Gender\"\n                                rules={[\n                                    {\n                                        required: true,\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n                        ) : null\n                    }\n                </Form.Item>\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                    <Button htmlType=\"button\" onClick={this.onReset}>\n                        Reset\n                    </Button>\n                    <Button type=\"link\" htmlType=\"button\" onClick={this.onFill}>\n                        Fill form\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default FormBox"]},"metadata":{},"sourceType":"module"}