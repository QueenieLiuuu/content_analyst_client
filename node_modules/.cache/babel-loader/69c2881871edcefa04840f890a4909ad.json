{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nconst service = axios.create({\n  // baseURL: '',\n  timeout: 5000\n});\nservice.interceptors.request.use(config => {\n  return config;\n}, error => {\n  console.log(error);\n  return Promise.reject(error);\n});\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  if (res.code !== 200) {\n    message.error(res.message);\n  } else {\n    return res;\n  }\n}, error => {\n  message.error(error.message);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"sources":["/Users/quingmin/Desktop/content_analyzer/src/commons/requests.js"],"names":["axios","message","service","create","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","data","code"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzB;AACAC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB;AAKAF,OAAO,CAACG,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACIC,MAAM,IAAI;AACN,SAAOA,MAAP;AACH,CAHL,EAIIC,KAAK,IAAI;AACLC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAPL;AAUAP,OAAO,CAACG,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B,CACIO,QAAQ,IAAI;AACR,QAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AAClBhB,IAAAA,OAAO,CAACQ,KAAR,CAAcM,GAAG,CAACd,OAAlB;AACH,GAFD,MAEO;AACH,WAAOc,GAAP;AACH;AACJ,CARL,EASIN,KAAK,IAAI;AACLR,EAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAK,CAACR,OAApB;AACA,SAAOW,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAZL;AAeA,eAAeP,OAAf","sourcesContent":["import axios from 'axios'\nimport { message } from 'antd';\n\nconst service = axios.create({\n    // baseURL: '',\n    timeout: 5000\n})\n\nservice.interceptors.request.use(\n    config => {\n        return config\n    },\n    error => {\n        console.log(error)\n        return Promise.reject(error)\n    }\n)\n\nservice.interceptors.response.use(\n    response => {\n        const res = response.data\n        if (res.code !== 200) {\n            message.error(res.message)\n        } else {\n            return res\n        }\n    },\n    error => {\n        message.error(error.message)\n        return Promise.reject(error)\n    }\n)\n\nexport default service"]},"metadata":{},"sourceType":"module"}